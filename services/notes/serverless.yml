# NOTE: update this with your service name
service: notes-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-notes-infra

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    pusherAppId: ${env:PUSHER_APP_ID}
    pusherKey: ${env:PUSHER_KEY}
    pusherSecret: ${env:PUSHER_SECRET}
    pusherEventName: ${env:PUSHER_EVENT_NAME}
    pusherChannel: ${env:PUSHER_CHANNEL}
    tableName: !ImportValue '${self:custom.sstApp}-TableName'
    collaboratorsTableName: !ImportValue '${self:custom.sstApp}-CollaboratorsTableName'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'
        - !ImportValue '${self:custom.sstApp}-CollaboratorsTableArn'

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

  # TODO: Separate out Collaborators and Notes endpoints to separate yml
  createCollaborator:
    # Defines an HTTP API endpoint that calls the main function in addCollaborator.js
    # - path: url path is /collaborators
    # - method: POST request
    handler: createCollaborator.main
    events:
      - http:
          path: collaborators
          method: post
          cors: true
          authorizer: aws_iam

  getCollaborationId:
    # Defines an HTTP API endpoint that calls the main function in getCollaborationId.js
    # - path: url path is /collaborators
    # - method: GET request
    handler: getCollaborationId.main
    events:
      - http:
          path: collaborators
          method: get
          cors: true
          authorizer: aws_iam
  notePusher:
    handler: notePusher.main
    events:
      - stream: arn:aws:dynamodb:us-east-1:811067755279:table/dev-notes-infra-dynamodb-TableCD117FA1-1JPTAT7M2J6CZ/stream/2020-11-27T21:43:22.107

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(../../resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(../../resources/cognito-policy.yml)}